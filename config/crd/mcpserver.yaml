apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: mcpservers.mcp.kagenti.com
spec:
  group: mcp.kagenti.com
  names:
    kind: MCPServer
    listKind: MCPServerList
    plural: mcpservers
    shortNames:
      - mcpsrv
    singular: mcpserver
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: |-
            MCPServer defines a collection of MCP (Model Context Protocol) servers to be aggregated by the gateway.
            It enables discovery and federation of tools from multiple backend MCP servers through HTTPRoute references,
            providing a declarative way to configure which MCP servers should be accessible through the gateway.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: |-
                MCPServerSpec defines the desired state of MCPServer.
                It specifies which HTTPRoutes point to MCP servers and how their tools should be federated.
              properties:
                targetRef:
                  description: |-
                    TargetRef specifies an HTTPRoute that points to a backend MCP server.
                    The referenced HTTPRoute should have backend services that implement the MCP protocol.
                    The controller will discover the backend service from this HTTPRoute and configure
                    the broker to federate tools from that MCP server.
                  properties:
                    group:
                      default: gateway.networking.k8s.io
                      description: Group is the group of the target resource.
                      enum:
                        - gateway.networking.k8s.io
                      type: string
                    kind:
                      default: HTTPRoute
                      description: Kind is the kind of the target resource.
                      enum:
                        - HTTPRoute
                      type: string
                    name:
                      description: Name is the name of the target resource.
                      type: string
                    namespace:
                      description:
                        Namespace of the target resource (optional, defaults
                        to same namespace)
                      type: string
                  required:
                    - group
                    - kind
                    - name
                  type: object
                toolPrefix:
                  description: |-
                    ToolPrefix is the prefix to add to all federated tools from referenced servers.
                    This helps avoid naming conflicts when aggregating tools from multiple sources.
                    For example, if two servers both provide a 'search' tool, prefixes like 'server1_' and 'server2_'
                    ensure they can coexist as 'server1_search' and 'server2_search'.
                  type: string
              required:
                - targetRef
              type: object
            status:
              description: |-
                MCPServerStatus represents the observed state of the MCPServer resource.
                It contains conditions that indicate whether the referenced servers have been
                successfully discovered and are ready for use.
              properties:
                conditions:
                  description: |-
                    Conditions represent the latest available observations of the MCPServer's state.
                    Common conditions include 'Ready' to indicate if all referenced servers are accessible.
                  items:
                    description:
                      "Condition contains details for one aspect of the current
                      state of this API Resource.\n---\nThis struct is intended for
                      direct use as an array at the field path .status.conditions.  For
                      example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                      observations of a foo's current state.\n\t    // Known .status.conditions.type
                      are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                      +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                      \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                      patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                      \   // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  description: |-
                    ObservedGeneration reflects the generation of the most recently observed MCPServer.
                    This is used to determine if validation should be performed when the spec changes.
                  format: int64
                  type: integer
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
